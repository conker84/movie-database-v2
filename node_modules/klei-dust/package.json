{
  "name": "klei-dust",
  "version": "1.0.0",
  "description": "A helper to use dustjs-linkedin along with Express",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/klei/dust.git"
  },
  "dependencies": {},
  "devDependencies": {
    "dustjs-linkedin": "*",
    "dustjs-helpers": "*",
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "dust.js",
    "node.js",
    "express",
    "dust",
    "dustjs-linkedin",
    "template",
    "view"
  ],
  "author": {
    "name": "Joakim Carlstein",
    "email": "joakim@klei.se"
  },
  "license": "MIT",
  "readme": "Klei Dust\n=========\n\n> **klei-dust** is a helper (inspired by [Consolidate](https://github.com/visionmedia/consolidate.js)) to use [dustjs-linkedin](https://npmjs.org/package/dustjs-linkedin) templates as views along with [express](https://npmjs.org/package/express) for [node.js](http://nodejs.org/).\n\nAdvantages\n----------\n\nThe main advantage with **klei-dust** is that it supports relative paths for partials and base templates.\n\n**E.g.** you can have a base template `base.dust` at `/views/base.dust` and a child template at `/views/child.dust` with the following contents:\n\nfile: /views/base.dust\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>A title here</title>\n    </head>\n\n    <body>\n        {+content/}\n    </body>\n</html>\n```\n\nfile: /views/child.dust\n\n```html\n{>base/}\n\n{<content}\n<p>Child content...</p>\n{/content}\n```\n\n**And child views in subfolders:**\n\nfile: /views/subviews/child2.dust\n\n```html\n{>\"../base\"/}\n\n{<content}\n<p>Sub child content...</p>\n{/content}\n```\n\nSee `root` and `relativeToFile` options below for alternatives.\n\nInstallation\n------------\n\n    $ npm install klei-dust\n\n**N.B.** You must install *dustjs-linkedin* as well.\n\nSetting up Klei Dust with Express\n---------------------------------\n\nTo use `dust` as your default template file extension use:\n\n```javascript\nvar express = require('express'),\n    kleiDust = require('klei-dust'),\n    app = express();\n\napp.configure(function () {\n    ...\n    app.set('views', __dirname + '/views');\n    app.engine('dust', kleiDust.dust);\n    app.set('view engine', 'dust');\n    app.set('view options', {layout: false});\n    ...\n});\n...\n```\n\nIf you want another extension, e.g. `html` then use this settings instead:\n\n```javascript\n    ...\n    kleiDust.setOptions({extension: 'html'}); // Add the extension option\n    app.set('views', __dirname + '/views');\n    app.engine('html', kleiDust.dust); // change engine to the same filetype\n    app.set('view engine', 'html');    // ditto\n    app.set('view options', {layout: false});\n    ...\n```\n\n**N.B.** In the examples above klei-dust uses the express `views` setting to locate views, see options below.\n\nUsing klei-dust without express\n-------------------------------\n\nHow to use klei-dust to compile templates whithout express:\n\n```javascript\nvar kleiDust = require('klei-dust');\n\nkleiDust.dust('<your-template-folder>/<your-template-name>', <template-data>, function (err, out) {\n    if (err) return console.log(err);\n\n    // Do something with `out`...\n});\n```\n\nAvailable options\n-----------------\n\n* `relativeToFile` - specifies if paths to partials, base templates, etc. should be specified relative to the current view or to the views root folder, defaults to `true`\n* `root` - sets the root directory for all the views/templates, if not set the express `views` setting is used (only applies if `relativeToFile` is set to `false`)\n* `extension` - sets the default extension for views if omitted in includes/partials, defaults to `.dust`\n* `cache` - specifies if the template cache should be enabled or not, defaults to `false`\n* `keepWhiteSpace` - if `true` whitespace in templates won't be compressed, defaults to `false`\n* `useHelpers` - if `true` klei-dust will try and load dustjs-helpers, defaults to `false`\n\nThe options is set with the `setOptions()` method.\n\nConvenience methods\n-------------------\n\n* `getDust` - returns the dustjs-linkedin instance to be able to use the streaming api and such.\n* `setHelpers` - sets the dust.helpers property to the given value.\n* `getHelpers` - gets the current dust.helpers.\n* `setFilters` - sets the dust.filters property to the given value.\n* `getFilters` - gets the current dust.filters.\n* `create` - create a new instance\n\nLicense\n---------\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/klei/dust/issues"
  },
  "homepage": "https://github.com/klei/dust",
  "_id": "klei-dust@1.0.0",
  "dist": {
    "shasum": "493f00faa892298a69d59f3455bc0238c917a674"
  },
  "_from": "klei-dust@",
  "_resolved": "https://registry.npmjs.org/klei-dust/-/klei-dust-1.0.0.tgz"
}
